-- Enable pgvector extension for vector embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Create blog_chunks table to store chunked content with embeddings
CREATE TABLE IF NOT EXISTS blog_chunks (
    id BIGSERIAL PRIMARY KEY,
    blog_post_id BIGINT NOT NULL REFERENCES blog_posts(id) ON DELETE CASCADE,
    chunk_index INTEGER NOT NULL,
    chunk_text TEXT NOT NULL,
    token_count INTEGER,
    embedding vector(1536), -- OpenAI text-embedding-3-small dimension
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(blog_post_id, chunk_index)
);

-- Create index for vector similarity search (using cosine distance)
CREATE INDEX IF NOT EXISTS blog_chunks_embedding_idx
ON blog_chunks USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Create index for faster lookups by blog_post_id
CREATE INDEX IF NOT EXISTS blog_chunks_blog_post_id_idx
ON blog_chunks(blog_post_id);

-- Create function for semantic search
CREATE OR REPLACE FUNCTION search_blog_chunks(
    query_embedding vector(1536),
    match_threshold float DEFAULT 0.7,
    match_count int DEFAULT 10
)
RETURNS TABLE (
    chunk_id bigint,
    blog_post_id bigint,
    chunk_text text,
    similarity float,
    blog_title text,
    blog_url text,
    blog_author text,
    blog_published_date text
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        bc.id AS chunk_id,
        bc.blog_post_id,
        bc.chunk_text,
        1 - (bc.embedding <=> query_embedding) AS similarity,
        bp.title AS blog_title,
        bp.url AS blog_url,
        bp.author AS blog_author,
        bp.published_date AS blog_published_date
    FROM blog_chunks bc
    JOIN blog_posts bp ON bc.blog_post_id = bp.id
    WHERE 1 - (bc.embedding <=> query_embedding) > match_threshold
    ORDER BY bc.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Grant permissions for anonymous users (adjust as needed for your security requirements)
ALTER TABLE blog_chunks ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Allow all operations for anonymous users" ON blog_chunks;
CREATE POLICY "Allow all operations for anonymous users"
    ON blog_chunks FOR ALL TO anon USING (true) WITH CHECK (true);

-- Add comment for documentation
COMMENT ON TABLE blog_chunks IS 'Stores chunked blog content with vector embeddings for semantic search';
COMMENT ON COLUMN blog_chunks.embedding IS 'Vector embedding generated by OpenAI text-embedding-3-small (1536 dimensions)';
COMMENT ON FUNCTION search_blog_chunks IS 'Semantic search function that returns blog chunks similar to the query embedding';
